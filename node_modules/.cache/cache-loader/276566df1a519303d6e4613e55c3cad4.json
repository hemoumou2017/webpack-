{"remainingRequest":"C:\\mine\\搭webpack环境\\so\\node_modules\\thread-loader\\dist\\cjs.js!C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js!C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js!C:\\mine\\搭webpack环境\\so\\node_modules\\node-libs-browser\\node_modules\\punycode\\punycode.js","dependencies":[{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\node-libs-browser\\node_modules\\punycode\\punycode.js","mtime":1458437195000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\mine\\搭webpack环境\\so\\node_modules\\node-libs-browser\\node_modules\\punycode\\punycode.js"],"names":["freeExports","exports","freeModule","module","freeGlobal","root","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","length","array","result","fn","parts","string","labels","encoded","map","output","counter","value","extra","codePoint","digit","flag","k","delta","firstTime","inputLength","input","i","n","bias","basic","j","error","index","oldi","w","basicToDigit","t","baseMinusT","out","adapt","ucs2encode","ucs2decode","currentValue","handledCPCount","basicLength","m","handledCPCountPlusOne","q","qMinusT","digitToBasic","mapDomain","decode","encode","punycode","toUnicode","define"],"mappings":"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","sourcesContent":["/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n"]}]}