{"remainingRequest":"C:\\mine\\搭webpack环境\\so\\node_modules\\thread-loader\\dist\\cjs.js!C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js!C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js!C:\\mine\\搭webpack环境\\so\\node_modules\\@babel\\polyfill\\node_modules\\core-js\\modules\\es6.regexp.split.js","dependencies":[{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\@babel\\polyfill\\node_modules\\core-js\\modules\\es6.regexp.split.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\mine\\搭webpack环境\\so\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7Cgp2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7Cgp2YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTsKCnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpOwoKdmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTsKCnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTsKCnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7Cgp2YXIgJG1pbiA9IE1hdGgubWluOwp2YXIgJHB1c2ggPSBbXS5wdXNoOwp2YXIgJFNQTElUID0gJ3NwbGl0JzsKdmFyIExFTkdUSCA9ICdsZW5ndGgnOwp2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnOwp2YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7IC8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yCgp2YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7Cn0pOyAvLyBAQHNwbGl0IGxvZ2ljCgpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkgewogIHZhciBpbnRlcm5hbFNwbGl0OwoKICBpZiAoJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHwgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8ICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fCAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHwgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fCAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF0pIHsKICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdAogICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIGludGVybmFsU3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkgewogICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpOwogICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTsgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXQKCiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7CiAgICAgIHZhciBvdXRwdXQgPSBbXTsKICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICsgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgKyAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgKyAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTsKICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwOwogICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7IC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5CgogICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpOwogICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDsKCiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7CiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTsKCiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHsKICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpOwogICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpOwogICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07CiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4OwogICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AKICAgICAgfQoKICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7CiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTsKICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7CgogICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0OwogICAgfTsgLy8gQ2hha3JhLCBWOAoKICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkgewogICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIGludGVybmFsU3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkgewogICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpOwogICAgfTsKICB9IGVsc2UgewogICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDsKICB9CgogIHJldHVybiBbLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXQKICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7CiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7CiAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTsKICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpOwogIH0sIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXQKICAvLwogIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnQKICAvLyB0aGUgJ3knIGZsYWcuCiAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHsKICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTsKICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTsKICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7CiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTsKICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApOwogICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7CiAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgKyAocngudW5pY29kZSA/ICd1JyA6ICcnKSArIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTsgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG8KICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy4KCiAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTsKICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwOwogICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdOwogICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107CiAgICB2YXIgcCA9IDA7CiAgICB2YXIgcSA9IDA7CiAgICB2YXIgQSA9IFtdOwoKICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHsKICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwOwogICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpOwogICAgICB2YXIgZTsKCiAgICAgIGlmICh6ID09PSBudWxsIHx8IChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHApIHsKICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpOwogICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgIEEucHVzaCh6W2ldKTsKICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTsKICAgICAgICB9CgogICAgICAgIHEgPSBwID0gZTsKICAgICAgfQogICAgfQoKICAgIEEucHVzaChTLnNsaWNlKHApKTsKICAgIHJldHVybiBBOwogIH1dOwp9KTs="},{"version":3,"sources":["C:\\mine\\搭webpack环境\\so\\node_modules\\@babel\\polyfill\\node_modules\\core-js\\modules\\es6.regexp.split.js"],"names":["isRegExp","require","anObject","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","$min","Math","$push","$SPLIT","LENGTH","LAST_INDEX","MAX_UINT32","SUPPORTS_Y","RegExp","internalSplit","string","String","separator","limit","$split","output","flags","lastLastIndex","splitLimit","separatorCopy","match","lastIndex","lastLength","O","defined","splitter","res","maybeCallNative","rx","S","C","unicodeMatching","lim","p","q","A","z","e","i"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n"]}]}